!function(){"use strict";const t=document.querySelector(".profile"),e=t.querySelector(".button-edit"),s=t.querySelector(".button-add"),n={};class r{constructor(t,e,s){let{nameofplace:n,url:r}=t;this._cardSelector=e,this._name=n,this._url=r,this._handleCardClick=s}createCard(){this._newCard=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);const t=this._newCard.querySelector(".card__title");return this.photoLinkCard=this._newCard.querySelector(".card__photo"),this._setEventListeners(),t.textContent=this._name,this.photoLinkCard.src=this._url,this.photoLinkCard.alt=this._name,this._newCard}_setEventListeners(){this._newCard.querySelector(".button-like").addEventListener("click",(t=>{this._toggleLike(t)})),this._newCard.querySelector(".button-delete").addEventListener("click",(()=>{this._deleteCard()})),this.photoLinkCard.addEventListener("click",(()=>{this._handleCardClick(this._name,this._url)}))}_toggleLike(t){t.target.classList.toggle("button-like_active")}_deleteCard(){this._newCard.remove(),this._newCard=null}}class o{constructor(t,e){this._config=t,this._form=e}enableValidation(){this._setEventListeners()}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll("".concat(this._config.inputSelector))),this._buttonElement=this._form.querySelector("".concat(this._config.submitButtonSelector)),this._toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)}_showInputError(t,e){const s=this._form.querySelector(".".concat(this._config.errorClass,"_").concat(t.id));t.classList.add(this._config.inputErrorClass),s.textContent=e,s.classList.add("".concat(this._config.errorClass,"_active"))}_hideInputError(t){const e=this._form.querySelector(".".concat(this._config.errorClass,"_").concat(t.id));t.classList.remove(this._config.inputErrorClass),e.classList.remove("".concat(this._config.errorClass,"_active")),e.textContent=""}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._hideInputError(t)}))}}class i{constructor(t){this._popup=document.querySelector(t),this._buttonClose=this._popup.querySelector(".button-close"),this._handleEscClosebind=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClosebind)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClosebind)}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._buttonClose.addEventListener("click",this.close.bind(this)),this._popup.addEventListener("click",(t=>{t.target===t.currentTarget&&this.close()}))}}class a extends i{constructor(t,e){super(t),this.handleFormSubmit=e,this._inputList=this._popup.querySelectorAll(".input"),this.setEventListeners()}_getInputValues(){return this.formValues={},this._inputList.forEach((t=>{this.formValues[t.name]=t.value})),this.formValues}setEventListeners(){this._form=this._popup.querySelector(".popup__container"),this._form.addEventListener("submit",(t=>{t.preventDefault(),this.handleFormSubmit(this._getInputValues())})),super.setEventListeners()}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}close(){this._form.reset(),super.close()}}const c=new a(".popup_form_edit",(function(t){p.setUserInfo(t.name,t.status),c.close()})),l=new a(".popup_form_add",(function(t){d.prependItem(_(t)),l.close()})),u=new class extends i{constructor(t){super(t),this._popupBigPhoto=this._popup.querySelector(".popup__bigPhoto"),this._popupPhotoSubtitle=this._popup.querySelector(".popup__subtitle")}open(t,e){this._popupBigPhoto.alt=t,this._popupBigPhoto.src=e,this._popupPhotoSubtitle.textContent=t,super.open()}}(".popup_photo"),p=new class{constructor(t,e){this._profileName=document.querySelector(t),this._profileStatus=document.querySelector(e)}getUserInfo(){return this._name=this._profileName.textContent,this._status=this._profileStatus.textContent,this.info={name:this._name,status:this._status},this.info}setUserInfo(t,e){this._profileName.textContent=t,this._profileStatus.textContent=e}}(".profile__name",".profile__status");var h;u.setEventListeners(),h={form:".popup__container",inputSelector:".input",submitButtonSelector:".button-submit",inactiveButtonClass:"button_invalid",inputErrorClass:"input_type_error",errorClass:"input-error"},Array.from(document.querySelectorAll(h.form)).forEach((t=>{const e=new o(h,t),s=t.getAttribute("name");n[s]=e,e.enableValidation()}));const d=new class{constructor(t,e){let{items:s,renderer:n}=t;this._renderedItems=s,this._renderer=n,this._container=document.querySelector(e)}addItem(t){this._container.append(t)}prependItem(t){this._container.prepend(t)}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._renderedItems.forEach((t=>{this._renderer(t)}))}}({items:[{nameofplace:"Архыз",url:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg"},{nameofplace:"Челябинская область",url:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg"},{nameofplace:"Иваново",url:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg"},{nameofplace:"Камчатка",url:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg"},{nameofplace:"Холмогорский район",url:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg"},{nameofplace:"Байкал",url:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg"}],renderer:t=>{const e=_(t);d.addItem(e)}},".cards");function _(t){return new r(t,".template__card",m).createCard()}function m(t,e){u.open(t,e)}d.renderItems(),e.addEventListener("click",(function(){c.open(),c.setInputValues(p.getUserInfo())})),s.addEventListener("click",(function(){n.formCard.resetValidation(),l.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,