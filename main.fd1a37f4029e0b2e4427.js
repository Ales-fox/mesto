!function(){"use strict";const t=document.querySelector(".profile"),e=t.querySelector(".button-edit"),s=t.querySelector(".button-add"),i=t.querySelector(".profile__avatar-hover"),o={urlDataProfile:"https://nomoreparties.co/v1/cohort-46/users/me/",urlCard:"https://mesto.nomoreparties.co/v1/cohort-46/cards/",urlAvatar:"https://mesto.nomoreparties.co/v1/cohort-46/users/me/avatar/",headers:{authorization:"13749ec2-245f-4fcd-8f22-451e84bec66b","Content-Type":"application/json"}},r={};class n{constructor(t,e,s,i,o,r,n,a,c){this._name=t.name,this._link=t.link,this._id=t._id,this._likes=t.likes,this._ownerId=t.owner._id,this._cardSelector=e,this._url=s,this._handleCardClick=i,this._deleteMethodCard=o,this._deleteLikes=r,this._putLikes=n,this._popupDelete=a,this._myId=c()._id,this._myName=c().name}createCard(){this._newCard=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._buttonDelete=this._newCard.querySelector(".button-delete"),this._ownerId!==this._myId&&this._buttonDelete.classList.add("button-delete_inactive"),this.titleCard=this._newCard.querySelector(".card__title"),this.buttonLike=this._newCard.querySelector(".button-like"),this.photoLinkCard=this._newCard.querySelector(".card__photo"),this.cardCountLike=this._newCard.querySelector(".card__count-like");for(let t=0;t<this._likes.length;t++)if(this._likes[t].name===this._myName){this.buttonLike.classList.add("button-like_active");break}return this._setEventListeners(),this.titleCard.textContent=this._name,this.photoLinkCard.src=this._link,this.photoLinkCard.alt=this._name,this.cardCountLike.textContent=this._likes.length,this._newCard}_setEventListeners(){this._newCard.querySelector(".button-like").addEventListener("click",(()=>{this.buttonLike.classList.contains("button-like_active")?this._removeLike():this._addLike()})),this._buttonDelete.classList.contains("button-delete_inactive")||this._buttonDelete.addEventListener("click",(()=>{this._popupDelete(this._deleteCard.bind(this))})),this.photoLinkCard.addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)}))}_addLike(){this._putLikes(this._url,this._id).then((t=>{this.buttonLike.classList.add("button-like_active"),this.cardCountLike.textContent=t.likes.length})).catch((t=>console.error(t)))}_removeLike(){this._deleteLikes(this._url,this._id).then((t=>{this.buttonLike.classList.remove("button-like_active"),this.cardCountLike.textContent=t.likes.length})).catch((t=>console.error(t)))}_deleteCard(){this._deleteMethodCard(this._url,this._id).then((t=>{this._newCard.remove(),this._newCard=null})).catch((t=>console.error(t)))}}class a{constructor(t,e){this._config=t,this._form=e}enableValidation(){this._setEventListeners()}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll("".concat(this._config.inputSelector))),this._buttonElement=this._form.querySelector("".concat(this._config.submitButtonSelector)),this._toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)}_showInputError(t,e){const s=this._form.querySelector(".".concat(this._config.errorClass,"_").concat(t.id));t.classList.add(this._config.inputErrorClass),s.textContent=e,s.classList.add("".concat(this._config.errorClass,"_active"))}_hideInputError(t){const e=this._form.querySelector(".".concat(this._config.errorClass,"_").concat(t.id));t.classList.remove(this._config.inputErrorClass),e.classList.remove("".concat(this._config.errorClass,"_active")),e.textContent=""}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._hideInputError(t)}))}}class c{constructor(t,e){let{items:s,renderer:i}=t;this._renderedItems=s,this._renderer=i,this._container=document.querySelector(e)}addItem(t){this._container.append(t)}prependItem(t){this._container.prepend(t)}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._renderedItems.forEach((t=>{this._renderer(t)}))}}class h{constructor(t){this._popup=document.querySelector(t),this._buttonClose=this._popup.querySelector(".button-close"),this._handleEscClosebind=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClosebind)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClosebind)}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._buttonClose.addEventListener("click",this.close.bind(this)),this._popup.addEventListener("click",(t=>{t.target===t.currentTarget&&this.close()}))}}class l extends h{constructor(t,e){super(t),this.handleFormSubmit=e,this._buttonSubmit=this._popup.querySelector("button-submit"),this._inputList=this._popup.querySelectorAll(".input"),this.setEventListeners()}_getInputValues(){return this.formValues={},this._inputList.forEach((t=>{this.formValues[t.name]=t.value})),this.formValues}setEventListeners(){this._form=this._popup.querySelector(".popup__container"),this._form.addEventListener("submit",(t=>{t.preventDefault(),this.handleFormSubmit(this._getInputValues(),t)})),super.setEventListeners()}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}close(){this._form.reset(),super.close()}}function u(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}const d=new class{constructor(t){let{headers:e}=t;u(this,"postCard",((t,e)=>fetch(t,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then((t=>t.ok?t.json():Promise.reject("Невозможно добавить карточку ".concat(t.status," ").concat(t.statusText)))))),u(this,"deleteCard",((t,e)=>fetch("".concat(t).concat(e),{method:"DELETE",headers:this._headers}).then((t=>t.ok?t.json():Promise.reject("Невозможно удалить карточку' ".concat(t.status," ").concat(t.statusText)))))),u(this,"deleteLikes",((t,e)=>fetch("".concat(t).concat(e,"/likes"),{method:"DELETE",headers:this._headers}).then((t=>t.ok?t.json():Promise.reject("Ошибка удаления лайка' ".concat(t.status," ").concat(t.statusText)))))),u(this,"putLikes",((t,e)=>fetch("".concat(t).concat(e,"/likes"),{method:"PUT",headers:this._headers}).then((t=>t.ok?t.json():Promise.reject("Ошибка установки лайка ".concat(t.status," ").concat(t.statusText)))))),this._headers=e}getData(t){return fetch(t,{headers:this._headers}).then((t=>{if(t.ok)return t.json();Promise.reject("Ошибка загрузки данных ".concat(t.status))}))}sendData(t,e){return fetch(t,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((t=>t.ok?t.json():Promise.reject("Ошибка отправки данных ".concat(t.status," ").concat(t.statusText))))}}(o),_=new l(".popup_form_edit",(function(t,e){k(!0,e),d.sendData(o.urlDataProfile,t).then((t=>{b.setUserInfo(t.name,t.about),_.close()})).catch((t=>console.error(t))),k(!1,e)})),p=new l(".popup_form_add",(function(t,e){k(!0,e),d.postCard(o.urlCard,t).then((t=>{C(),p.close()})).catch((t=>console.error(t))),k(!1,e)})),m=new class extends h{constructor(t){super(t),this._popupBigPhoto=this._popup.querySelector(".popup__bigPhoto"),this._popupPhotoSubtitle=this._popup.querySelector(".popup__subtitle")}open(t,e){this._popupBigPhoto.alt=t,this._popupBigPhoto.src=e,this._popupPhotoSubtitle.textContent=t,super.open()}}(".popup_photo"),f=new class extends h{constructor(t,e){super(t),this.handleFormSubmit=e,this._setEventListeners()}_setEventListeners(){this._form=this._popup.querySelector(".popup__container"),this._form.addEventListener("submit",(t=>{t.preventDefault(),this.handleFormSubmit(this.deleteCard),super.close()})),super.setEventListeners()}open(t){super.open(),this.deleteCard=t}}(".popup_form_delete",(function(t){t()})),v=new l(".popup_form_updateAvatar",(function(t,e){k(!0,e),d.sendData(o.urlAvatar,t).then((t=>{b.setUserAvatar(t.avatar),v.close()})).catch((t=>console.error(t))),k(!1,e)})),b=new class{constructor(t,e,s){var i,o;o=()=>this._userInformation,(i="getFullPackInfoObj")in this?Object.defineProperty(this,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[i]=o,this._profileName=document.querySelector(t),this._profileStatus=document.querySelector(e),this._profileAvatar=document.querySelector(s)}getUserInfo(){return this._name=this._profileName.textContent,this._about=this._profileStatus.textContent,this.info={name:this._name,about:this._about},this.info}saveServerInformation(t){this._userInformation=t}setUserInfo(t,e){this._profileName.textContent=t,this._profileStatus.textContent=e}setUserAvatar(t){this._profileAvatar.src=t}}(".profile__name",".profile__status",".profile__avatar");function C(){d.getData(o.urlCard).then((t=>{const e=new c({items:t,renderer:t=>{const s=new n(t,".template__card",o.urlCard,L,d.deleteCard,d.deleteLikes,d.putLikes,f.open.bind(f),b.getFullPackInfoObj).createCard();e.addItem(s)}},".cards");e.renderItems()})).catch((t=>console.log(t)))}function L(t,e){m.open(t,e)}function k(t,e){e.textContent=t?"Cохранение...":"Cохранить"}var E;m.setEventListeners(),E={form:".popup__container",inputSelector:".input",submitButtonSelector:".button-submit",inactiveButtonClass:"button_invalid",inputErrorClass:"input_type_error",errorClass:"input-error"},Array.from(document.querySelectorAll(E.form)).forEach((t=>{const e=new a(E,t),s=t.getAttribute("name");r[s]=e,e.enableValidation()})),d.getData(o.urlDataProfile).then((t=>{b.saveServerInformation(t),b.setUserInfo(t.name,t.about),b.setUserAvatar(t.avatar)})).catch((t=>console.log(t))),C(),e.addEventListener("click",(function(){_.open(),_.setInputValues(b.getUserInfo())})),s.addEventListener("click",(function(){r.formCard.resetValidation(),p.open()})),i.addEventListener("click",(function(){v.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,