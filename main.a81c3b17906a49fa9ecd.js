!function(){"use strict";const t=document.querySelector(".profile"),e=t.querySelector(".button-edit"),s=t.querySelector(".button-add"),i=t.querySelector(".profile__avatar-hover"),r={};class n{constructor(t,e,s,i,r,n,o){this._name=t.name,this._link=t.link,this._id=t._id,this._likes=t.likes,this._ownerId=t.owner._id,this._cardSelector=e,this._handleCardClick=s,this._deleteLikes=i,this._putLikes=r,this._popupDelete=n,this._myId=o()._id,this._myName=o().name}createCard(){this._newCard=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._buttonDelete=this._newCard.querySelector(".button-delete"),this._ownerId!==this._myId&&this._buttonDelete.classList.add("button-delete_inactive"),this.titleCard=this._newCard.querySelector(".card__title"),this.buttonLike=this._newCard.querySelector(".button-like"),this.photoLinkCard=this._newCard.querySelector(".card__photo"),this.cardCountLike=this._newCard.querySelector(".card__count-like");for(let t=0;t<this._likes.length;t++)if(this._likes[t].name===this._myName){this._setClassLike();break}return this._setEventListeners(),this.titleCard.textContent=this._name,this.photoLinkCard.src=this._link,this.photoLinkCard.alt=this._name,this.cardCountLike.textContent=this._likes.length,this._newCard}_setEventListeners(){this._newCard.querySelector(".button-like").addEventListener("click",(()=>{this.buttonLike.classList.contains("button-like_active")?this._removeLike():this._addLike()})),this._buttonDelete.classList.contains("button-delete_inactive")||this._buttonDelete.addEventListener("click",(()=>{this._popupDelete(this._deleteCard.bind(this),this._id)})),this.photoLinkCard.addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)}))}_addLike(){this._putLikes(this._id).then((t=>{this._setClassLike(),this.cardCountLike.textContent=t.likes.length})).catch((t=>console.error(t)))}_removeLike(){this._deleteLikes(this._id).then((t=>{this._setClassLike(),this.cardCountLike.textContent=t.likes.length})).catch((t=>console.error(t)))}_setClassLike(){this.buttonLike.classList.toggle("button-like_active")}_deleteCard(){this._deleteDomCard(),this._newCard=null}_deleteDomCard(){this._newCard.remove()}}class o{constructor(t,e){this._config=t,this._form=e,this._inputList=Array.from(this._form.querySelectorAll("".concat(this._config.inputSelector))),this._buttonElement=this._form.querySelector("".concat(this._config.submitButtonSelector))}enableValidation(){this._setEventListeners()}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)}_showInputError(t,e){const s=this._form.querySelector(".".concat(this._config.errorClass,"_").concat(t.id));t.classList.add(this._config.inputErrorClass),s.textContent=e,s.classList.add("".concat(this._config.errorClass,"_active"))}_hideInputError(t){const e=this._form.querySelector(".".concat(this._config.errorClass,"_").concat(t.id));t.classList.remove(this._config.inputErrorClass),e.classList.remove("".concat(this._config.errorClass,"_active")),e.textContent=""}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._hideInputError(t)}))}}class a{constructor(t){this._popup=document.querySelector(t),this._buttonClose=this._popup.querySelector(".button-close"),this._handleEscClosebind=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClosebind)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClosebind)}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._buttonClose.addEventListener("click",this.close.bind(this)),this._popup.addEventListener("mousedown",(t=>{t.target===t.currentTarget&&this.close()}))}}class h extends a{constructor(t,e){super(t),this.handleFormSubmit=e,this._buttonSubmit=this._popup.querySelector(".button-submit"),this._inputList=this._popup.querySelectorAll(".input"),this.setEventListeners()}_getInputValues(){return this.formValues={},this._inputList.forEach((t=>{this.formValues[t.name]=t.value})),this.formValues}setEventListeners(){this._form=this._popup.querySelector(".popup__container"),this._form.addEventListener("submit",(t=>{t.preventDefault(),this.handleFormSubmit(this._getInputValues(),this._buttonSubmit)})),super.setEventListeners()}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}close(){this._form.reset(),super.close()}}function c(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}const l=new class{constructor(t){let{baseURL:e,headers:s}=t;c(this,"postCard",(t=>fetch(this._urlCard,{method:"POST",headers:this._headers,body:JSON.stringify(t)}).then((t=>this._getResponseData(t))))),c(this,"deleteCard",(t=>fetch("".concat(this._urlCard).concat(t),{method:"DELETE",headers:this._headers}).then((t=>this._getResponseData(t))))),c(this,"putLikes",(t=>fetch("".concat(this._urlCard).concat(t,"/likes"),{method:"PUT",headers:this._headers}).then((t=>this._getResponseData(t))))),c(this,"deleteLikes",(t=>fetch("".concat(this._urlCard).concat(t,"/likes"),{method:"DELETE",headers:this._headers}).then((t=>this._getResponseData(t))))),this._baseURL=e,this._urlDataProfile="".concat(this._baseURL,"users/me/"),this._urlCard="".concat(this._baseURL,"cards/"),this._urlAvatar="".concat(this._baseURL,"users/me/avatar/"),this._headers=s}getDataProfile(){return fetch(this._urlDataProfile,{headers:this._headers}).then((t=>this._getResponseData(t)))}getDataCard(){return fetch(this._urlCard,{headers:this._headers}).then((t=>this._getResponseData(t)))}sendDataProfile(t){return fetch(this._urlDataProfile,{method:"PATCH",headers:this._headers,body:JSON.stringify(t)}).then((t=>this._getResponseData(t)))}sendDataAvatar(t){return fetch(this._urlAvatar,{method:"PATCH",headers:this._headers,body:JSON.stringify(t)}).then((t=>this._getResponseData(t)))}_getResponseData(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status,"  ").concat(t.statusText))}}({baseURL:"https://nomoreparties.co/v1/cohort-46/",headers:{authorization:"13749ec2-245f-4fcd-8f22-451e84bec66b","Content-Type":"application/json"}}),u=new class{constructor(t,e){let{renderer:s}=t;this._renderer=s,this._container=document.querySelector(e)}addItem(t){this._container.append(t)}prependItem(t){this._container.prepend(t)}clear(){this._container.innerHTML=""}renderItems(t){this.clear(),this._renderedItems=t,this._renderedItems.forEach((t=>{this._renderer(t)}))}}({renderer:t=>{const e=C(t);u.addItem(e)}},".cards"),_=new h(".popup_form_edit",(function(t,e){v(!0,e),l.sendDataProfile(t).then((t=>{b.setUserInfo(t.name,t.about),_.close()})).catch((t=>console.error(t))),v(!1,e)})),d=new h(".popup_form_add",(function(t,e){v(!0,e),l.postCard(t).then((t=>{const e=C(t);u.prependItem(e),d.close()})).catch((t=>console.error(t))),v(!1,e)})),p=new class extends a{constructor(t){super(t),this._popupBigPhoto=this._popup.querySelector(".popup__bigPhoto"),this._popupPhotoSubtitle=this._popup.querySelector(".popup__subtitle")}open(t,e){this._popupBigPhoto.alt=t,this._popupBigPhoto.src=e,this._popupPhotoSubtitle.textContent=t,super.open()}}(".popup_photo"),m=new class extends a{constructor(t,e){super(t),this.handleFormSubmit=e,this._setEventListeners()}_setEventListeners(){this._form=this._popup.querySelector(".popup__container"),this._form.addEventListener("submit",(t=>{t.preventDefault(),this.handleFormSubmit(this.deleteCard,this.id)})),super.setEventListeners()}open(t,e){super.open(),this.deleteCard=t,this.id=e}}(".popup_form_delete",(function(t,e){l.deleteCard(e).then((()=>{t(),m.close()})).catch((t=>console.error(t)))})),f=new h(".popup_form_updateAvatar",(function(t,e){v(!0,e),l.sendDataAvatar(t).then((t=>{b.setUserAvatar(t.avatar),f.close()})).catch((t=>console.error(t))),v(!1,e)})),b=new class{constructor(t,e,s){var i,r;r=()=>this._userInformation,(i="getFullPackInfoObj")in this?Object.defineProperty(this,i,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[i]=r,this._profileName=document.querySelector(t),this._profileStatus=document.querySelector(e),this._profileAvatar=document.querySelector(s)}getUserInfo(){return this._name=this._profileName.textContent,this._about=this._profileStatus.textContent,this.info={name:this._name,about:this._about},this.info}saveServerInformation(t){this._userInformation=t}setUserInfo(t,e){this._profileName.textContent=t,this._profileStatus.textContent=e}setUserAvatar(t){this._profileAvatar.src=t}}(".profile__name",".profile__status",".profile__avatar");function C(t){return new n(t,".template__card",L,l.deleteLikes,l.putLikes,m.open.bind(m),b.getFullPackInfoObj).createCard()}function L(t,e){p.open(t,e)}function v(t,e){e.textContent=t?"Cохранение...":"Cохранить"}var k;p.setEventListeners(),k={form:".popup__container",inputSelector:".input",submitButtonSelector:".button-submit",inactiveButtonClass:"button_invalid",inputErrorClass:"input_type_error",errorClass:"input-error"},Array.from(document.querySelectorAll(k.form)).forEach((t=>{const e=new o(k,t),s=t.getAttribute("name");r[s]=e,e.enableValidation()})),Promise.all([l.getDataProfile(),l.getDataCard()]).then((t=>{let[e,s]=t;b.saveServerInformation(e),b.setUserInfo(e.name,e.about),b.setUserAvatar(e.avatar),u.renderItems(s)})),e.addEventListener("click",(function(){_.open(),_.setInputValues(b.getUserInfo())})),s.addEventListener("click",(function(){r.formCard.resetValidation(),d.open()})),i.addEventListener("click",(function(){f.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,